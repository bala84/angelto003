<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html style="position: static;" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head profile="http://gmpg.org/xfn/11">



	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

	<title>Dependency Injection and the Composite Application Block (Introduction to CAB/SCSF Part 5) « Rich Newman</title>


	<style type="text/css" media="screen">
		@import url( http://s3.wordpress.com/wp-content/themes/pub/blue-green/style.css?m=1245873790b );
	</style>

	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://richnewman.wordpress.com/feed/">

	<link rel="pingback" href="http://richnewman.wordpress.com/xmlrpc.php">
	<link rel="alternate" type="application/rss+xml" title="Rich Newman » Dependency Injection and the Composite Application Block (Introduction to CAB/SCSF Part&nbsp;5) Comments Feed" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/feed/">
<script src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/a_003.htm" type="text/javascript"></script><script src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/auto_shot.htm" type="text/javascript"></script><script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel="stylesheet" href="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/global.css" type="text/css">
<script type="text/javascript" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/comment-reply.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://richnewman.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://richnewman.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="Rich Newman" href="http://richnewman.wordpress.com/">
<link rel="start" title="Day&nbsp;1" href="http://richnewman.wordpress.com/2007/03/04/day-1/">
<link rel="prev" title="Random Numbers&nbsp;Problem" href="http://richnewman.wordpress.com/2007/08/04/random-numbers-problem/">
<link rel="next" title="A Beginner’s Guide to calling a .NET Library from&nbsp;Access" href="http://richnewman.wordpress.com/2007/08/25/a-beginner%e2%80%99s-guide-to-calling-a-net-library-from-access/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/">
<link rel="shortcut icon" type="image/x-icon" href="http://www.gravatar.com/blavatar/7864a25226671eb271870f6bdc69e29f?s=16&amp;d=http://s.wordpress.com/favicon.ico">
<link rel="icon" type="image/x-icon" href="http://www.gravatar.com/blavatar/7864a25226671eb271870f6bdc69e29f?s=16&amp;d=http://s.wordpress.com/favicon.ico">
<link rel="apple-touch-icon" href="http://www.gravatar.com/blavatar/cadbe3553ff3d2b663c10a55c50bef43?s=158&amp;d=http://s.wordpress.com/wp-content/themes/h4/i/webclip.png">
<link rel="openid.server" href="http://richnewman.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://richnewman.wordpress.com/">

<script defer="defer" id="snap_preview_anywhere" type="text/javascript" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/snap_preview_anywhere.htm"></script>

</head><body><div class="snap_noengage snap_noshots" style="border: 0pt none ; margin: 0pt; padding: 0pt; position: absolute; visibility: hidden; top: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; left: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; z-index: 99999; width: 328px; height: 346px;" id="snap_com_shot_main"><img id="snap_com_shot_link_icon" class="snap_preview_icon" style="border: 0pt none ; margin: 0pt ! important; padding: 1px 0pt 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: hidden; z-index: 99999; width: 14px; height: 12px; background-position: -1128px 0pt; background-repeat: no-repeat; text-decoration: none;" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<div style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; width: 50px; height: 50px;" id="snap_com_shot_bg_div_tl"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: -50px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" id="snap_com_shot_bg_img_tl" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/palette.png"></div>
<div style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; right: 0px; width: 50px; height: 50px;" id="snap_com_shot_bg_div_tr"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: -100px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" id="snap_com_shot_bg_img_tr" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/palette.png"></div>
<div style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; bottom: 1px; width: 50px; height: 50px;" id="snap_com_shot_bg_div_bl"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: -150px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" id="snap_com_shot_bg_img_bl" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/palette.png"></div>
<div style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; right: 0px; bottom: 1px; width: 50px; height: 50px;" id="snap_com_shot_bg_div_br"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" id="snap_com_shot_bg_img_br" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/palette.png"></div>
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 50px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/bg/bg_lr.png); background-color: transparent; visibility: inherit; z-index: 99999; width: 100px; height: 246px; background-repeat: repeat;" id="snap_com_shot_bg_img_l" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: 50px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/bg/bg_lr.png); background-color: transparent; visibility: inherit; z-index: 99999; right: 0px; width: 100px; height: 246px; background-repeat: repeat;" id="snap_com_shot_bg_img_r" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 50px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/bg/bg_tb.png); background-color: transparent; visibility: inherit; z-index: 99999; width: 228px; height: 100px; background-repeat: repeat;" id="snap_com_shot_bg_img_t" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 50px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/bg/bg_tb.png); background-color: transparent; visibility: inherit; z-index: 99999; bottom: 1px; width: 228px; height: 100px; background-repeat: repeat;" id="snap_com_shot_bg_img_b" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<div id="snap_com_shot_bg_div_point" style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; z-index: 100000; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 7px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 28px; height: 29px; bottom: -21px; right: auto;"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: -276px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" id="snap_com_shot_bg_img_point" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/palette.png"></div>
<div style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 2px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(216, 216, 217); visibility: inherit; z-index: 99999; bottom: 37px; width: 320px; height: 82px;" id="snap_com_shot_bg_body"></div>

<img style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100001; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 5px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 200px; height: 5px; right: auto; bottom: 3px;" id="snap_com_shot_pointer0" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100001; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 5px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 164px; height: 5px; right: auto; bottom: -1px;" id="snap_com_shot_pointer1" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100001; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 5px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 128px; height: 5px; right: auto; bottom: -6px;" id="snap_com_shot_pointer2" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100001; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 5px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 92px; height: 5px; right: auto; bottom: -11px;" id="snap_com_shot_pointer3" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100001; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 5px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 56px; height: 5px; right: auto; bottom: -16px;" id="snap_com_shot_pointer4" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100001; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 5px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 20px; height: 5px; right: auto; bottom: -21px;" id="snap_com_shot_pointer5" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<div style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 1px; top: 1px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; width: 322px; height: 338px;" id="snap_com_shot_bubble">
<img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; width: 322px; height: 297px;" id="snap_com_shot_bubble_img" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
<div style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; width: 322px; height: 338px; text-align: left;" id="snap_com_shot_body">
 <table id="snap_com_shot_drag_overlay" title="drag to move" style="border: 0pt none ; margin: 0pt; padding: 0pt; display: none; z-index: 100008; cursor: move ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 322px; height: 20px;"><tbody><tr><td style="border: 0pt none ; background-color: transparent;">&nbsp;</td></tr></tbody></table>
 <div id="snap_com_shot_top_left_menu" style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100009; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 1px; top: 1px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: hidden;"><img id="snap_com_shot_preview_toggle" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border: 0pt none ; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -319px 0pt; background-repeat: no-repeat; width: 25px; height: 18px; display: inline;"><img id="snap_com_shot_rss_toggle" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border: 0pt none ; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -475px 0pt; background-repeat: no-repeat; width: 25px; height: 18px; display: inline;" align="top"></div>
 <div id="snap_com_shot_top_right_menu" style="border: 0pt none ; margin: 0pt; padding: 0pt; z-index: 100009; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: 1px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; right: 1px;"><img id="snap_com_shot_share_button" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border: 0pt none ; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -807px 0pt; background-repeat: no-repeat; width: 50px; height: 17px; display: none;" align="top"><img title="Snap Shots Options" alt="Snap Shots Options" id="snap_com_shot_option_button" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border: 0pt none ; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -421px 0pt; background-repeat: no-repeat; width: 27px; height: 18px; display: inline;"><img title="Make this Shot larger" id="snap_com_shot_zoom_img" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border: 0pt none ; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -523px 0pt; background-repeat: no-repeat; width: 23px; height: 18px; display: inline;" align="top"><img id="snap_com_shot_pin_close_img" title="Close" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border: 0pt none ; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -711px 0pt; background-repeat: no-repeat; width: 23px; height: 18px; display: none;" align="top"></div>
 <div id="snap_com_shot_option_menu" style="border: 1px solid rgb(139, 138, 138); margin: 0pt; padding: 0pt; z-index: 100009; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: Trebuchet; float: none; position: absolute; left: auto; top: 18px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: white; visibility: hidden; right: 20px; font-size: 10px; color: rgb(51, 51, 51);">
  <div title="Snap Shots Options" id="snap_com_shot_option_a" style="border: 0pt none ; margin: 0pt; padding: 0pt 5px; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; white-space: nowrap; height: 17px;">Options</div>
  <div id="snap_com_shot_disable_a" style="border-style: solid none none; border-color: rgb(192, 192, 192) -moz-use-text-color -moz-use-text-color; border-width: 1px 0pt 0pt; margin: 0pt; padding: 0pt 5px; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; white-space: nowrap; height: 17px;">Disable</div>
 </div>
 <div id="snap_com_shot_search" style="border: 0pt none ; margin: 0pt ! important; padding: 0pt ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 1px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(238, 238, 238); visibility: hidden; z-index: 99999; bottom: 31px; width: 320px; height: 78px;">
  <div id="snap_com_shot_search_form" style="border: 0pt none ; margin: 0pt ! important; padding: 0pt ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" action="#" method="GET" accept-charset="UTF8" target="_blank">
   <input id="snap_com_shot_box" name="snap_com_shot_box_name" autocomplete="off" style="border: 1px solid rgb(153, 153, 153); margin: 0pt; padding: 5px 0pt 0pt 6px; visibility: inherit ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 12px; top: 24px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); z-index: 99999; width: 232px; height: 20px; font-size: 12px; color: rgb(51, 51, 51); direction: ltr; display: none;" type="text">
   <button style="border: 0pt none ; margin: 0pt 0pt 0pt 5px; padding: 1px 2px 2px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: 23px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; right: 7px; background-position: -164px 0pt; background-repeat: no-repeat; width: 55px; height: 29px; cursor: pointer; font-size: 11px; color: rgb(68, 68, 68); text-align: center;" type="submit" name="snap_com_shot_submit" id="snap_com_shot_submit"></button>
   <a style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" href="about:blank" id="snap_com_shot_hidden_link"></a>
  </div>
 </div>
 <div style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 10px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: hidden; z-index: 99999; bottom: 8px; height: 15px; direction: ltr;" id="snap_com_shot_promo"><a href="https://account.snap.com/signup.php?source=richnewman.wordpress.com&amp;campaign=viral-foot" title="Sign Up and add Free Snap Shots to your site in less than 5 min!" style="border-style: none none dotted; border-color: -moz-use-text-color -moz-use-text-color rgb(116, 114, 116); border-width: 0pt 0pt 1px; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; font-size: 11px; color: rgb(51, 51, 51); text-decoration: none;" class="snap_nopreview" id="snap_com_shot_promo_a">Get Free Shots</a><img id="snap_com_shot_promo_icon" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border-top: 0pt none; border-left: 0pt none; border-right: 0pt none; border-bottom: medium none ! important; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -1128px 0pt; background-repeat: no-repeat; width: 14px; height: 12px; display: inline;"></div>
 <div style="border: 1px solid rgb(196, 196, 196); margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 20px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(255, 255, 255); visibility: inherit; z-index: 99999; width: 320px; height: 207px;" id="snap_com_shot_preview_div">
  <div style="border: 0pt none ; margin: 0pt; padding: 0pt; white-space: nowrap ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 6px; top: 5px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" id="snap_com_shot_url_wrapper"><a style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: white; visibility: inherit; z-index: 99999;" class="snap_nopreview" id="snap_com_shot_url_favicon" href="#"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -889px 0pt; background-repeat: no-repeat; width: 16px; height: 16px; display: inline;" id="snap_com_shot_favicon" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif"></a>&nbsp;<a style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: bold; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: white; visibility: inherit; z-index: 99999; font-size: 13px; text-decoration: underline; color: rgb(0, 0, 238); text-align: left;" class="snap_nopreview" id="snap_com_shot_url_a" href="#"><span style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: bold; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; display: inline; font-size: 13px; text-align: left;" id="snap_com_shot_url"></span></a>&nbsp;<a style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: white; visibility: inherit; z-index: 99999;" class="snap_nopreview" id="snap_com_shot_url_arrow" href="#"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -1165px 0pt; background-repeat: no-repeat; width: 7px; height: 7px; display: inline;" id="snap_com_shot_arrow" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif"></a></div>
  <a style="border: 1px solid rgb(153, 153, 153); margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 23px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(255, 255, 255); visibility: inherit; z-index: 99999; bottom: 12px; width: 270px; height: 161px;" class="snap_nopreview" id="snap_com_shot_img_a" href="#"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999;" id="snap_com_shot_preview_img" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif"></a>
  <iframe style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(255, 255, 255); visibility: inherit; z-index: 99999; width: 320px; height: 207px;" name="snap_com_shot_preview" id="snap_com_shot_preview" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/a_002.htm" scrolling="no" frameborder="no"></iframe><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99989; display: none;" id="snap_com_shot_loading_img" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/loading.gif">
 </div>
 <div style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 1px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(238, 238, 238); visibility: inherit; z-index: 99999; bottom: 30px; width: 320px; height: 79px;" id="snap_com_shot_marea"><div style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(238, 238, 238); width: 100%; height: 100%; display: none;"></div><div style="border: 0pt none ; margin: 0pt; padding: 0pt; overflow: hidden; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(238, 238, 238); width: 100%; height: 100%; display: none;"></div></div>
 <img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 9px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; bottom: 6px;" id="snap_com_shot_cobrand_img" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/logo_wordpress.gif">
  <table id="snap_com_shot_flash_overlay" title="Click to play" style="border: 0pt none ; margin: 0pt; padding: 0pt; display: none; z-index: 100010; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 50px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; width: 322px; height: 180px;"><tbody><tr><td>&nbsp;</td></tr></tbody></table>
</div><div style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 0px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; width: 322px;" id="snap_com_shot_options">
 <iframe style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 0px; top: 20px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: rgb(255, 255, 255); visibility: inherit; z-index: 99999; width: 321px; height: 207px;" id="snap_com_shot_option_iframe" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/a_002.htm" scrolling="no" width="265" frameborder="0" height="190"></iframe>
 <div style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: 1px; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; right: 1px;" id="snap_com_shot_option_menu_bar"><img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -394px 0pt; background-repeat: no-repeat; width: 27px; height: 18px; display: inline;" class="snap_nopreview" id="snap_com_shot_option_button_disabled" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif"><img title="Close" alt="Close" class="snap_nopreview" id="snap_com_shot_option_close_a" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif" style="border: 0pt none ; margin: 0pt; padding: 0pt; cursor: pointer ! important; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; background-position: -711px 0pt; background-repeat: no-repeat; width: 23px; height: 18px; font-size: 10px; color: rgb(133, 122, 122); text-decoration: none;"></div>
<input id="snap_com_shot_option_cancel" style="border: 1px solid rgb(153, 153, 153); margin: 0pt; padding: 0pt; background: transparent url(http://i.ixnp.com/images/btn-bkgd.gif) repeat scroll 0% 0%; visibility: inherit; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: 201px; line-height: normal; z-index: 99999; right: 54px; width: 50px; height: 21px; font-size: 11px; color: rgb(51, 51, 51); -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; display: none;" name="snap_com_shot_option_cancel_name" value="Cancel" title="Close" type="button">
</div>
 <a style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: 9px; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: inherit; z-index: 99999; bottom: 6px; width: 100px; height: 20px;" class="snap_nopreview" id="snap_com_shot_cobrand_a" href="http://shots.snap.com/explore/76105/?key=e5a3c1e6dff5de35b1c6e7c470411886&amp;src=richnewman.wordpress.com&amp;cp=pub-logo&amp;url=http%3A%2F%2Fwordpress.com%2Fsnap" target="_blank"><div style="display: none;"></div></a>
 <a title="Powered by Snap" class="snap_nopreview" id="snap_com_shot_logo_a" href="http://www.snap.com/about/shots1.php?source=pub-2311827-www.wordpress.com&amp;campaign=snap-shots-logo" style="border: 0pt none ; margin: 0pt; padding: 0pt; height: 15px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/theme/silver/palette.gif); background-color: transparent; visibility: inherit; z-index: 99999; right: 7px; bottom: 8px; background-position: -950px 0pt; background-repeat: no-repeat; width: 81px;" target="_blank"><div style="display: none;"></div></a>
 <a style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: hidden; z-index: 99999;" class="snap_nopreview" id="snap_com_shot_ribbon_a" href="http://www.snap.com/snapshots.php?source=richnewman.wordpress.com&amp;campaign=charity-ribbon#shares"><img title="Portions of Snap Shares Ad Impressions on this site are donated to Charity" alt="Snap Shares for charity" style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: absolute; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: hidden; z-index: 99999; right: 98px; bottom: 5px; width: 17px; height: 20px;" id="snap_com_shot_ribbon" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/ribbon.png"></a>
 <img style="border: 0pt none ; margin: 0pt; padding: 0pt; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(http://i.ixnp.com/images/v3.88/t.gif); background-color: transparent; visibility: hidden; z-index: 99999;" id="snap_com_shot_lg" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/t.gif">
</div>
</div>
<div id="rap">
<h1 id="header"><a href="http://richnewman.wordpress.com/">Rich Newman</a></h1>

<div id="content">
<!-- end header -->


<h2>August 5, 2007</h2>
<div class="post-80 post hentry category-net category-cab category-composite-application-block category-dependency-injection category-inversion-of-control category-scsf category-smart-client-software-factory category-beginners-guide category-c category-technology" id="post-80">
	 <h3 class="storytitle"><a href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/" rel="bookmark">Dependency Injection and the Composite Application Block (Introduction to CAB/SCSF Part&nbsp;5)</a></h3>
	<div class="meta">Filed under:  <a href="http://en.wordpress.com/tag/net/" title="View all posts in .net" rel="category tag">.net</a>, <a href="http://en.wordpress.com/tag/cab/" title="View all posts in CAB" rel="category tag">CAB</a>, <a href="http://en.wordpress.com/tag/composite-application-block/" title="View all posts in Composite Application Block" rel="category tag">Composite Application Block</a>, <a href="http://en.wordpress.com/tag/dependency-injection/" title="View all posts in Dependency Injection" rel="category tag">Dependency Injection</a>, <a href="http://en.wordpress.com/tag/inversion-of-control/" title="View all posts in Inversion of Control" rel="category tag">Inversion of Control</a>, <a href="http://en.wordpress.com/tag/scsf/" title="View all posts in SCSF" rel="category tag">SCSF</a>, <a href="http://en.wordpress.com/tag/smart-client-software-factory/" title="View all posts in Smart Client Software Factory" rel="category tag">Smart Client Software Factory</a>, <a href="http://en.wordpress.com/tag/beginners-guide/" title="View all posts in beginners guide" rel="category tag">beginners guide</a>, <a href="http://en.wordpress.com/tag/c/" title="View all posts in c#" rel="category tag">c#</a>, <a href="http://en.wordpress.com/tag/technology/" title="View all posts in technology" rel="category tag">technology</a> —  richnewman @ 12:35 pm </div>

	<div class="storycontent">
		<div class="snap_preview"><p><strong>Introduction</strong></p>
<p>In <a href="http://richnewman.wordpress.com/2007/07/14/an-introduction-to-the-smart-client-software-factory-and-composite-application-block-part-1-modules-and-shells/">part 1</a>
of this series of articles I described a simple CAB application. This
had three Windows Application C# projects with no references to each
other. In spite of this, with some very simple code we could get all
three to launch their individual screens. That very simple application
didn’t have the projects interacting in any other way, however.</p>
<p><a href="http://richnewman.wordpress.com/2007/07/14/an-introduction-to-the-smart-client-software-factory-and-composite-application-block-part-2-workitems/">Part 2</a>
of the series described WorkItems, which can be thought of as
containers for code, and how we could add a WorkItem to each of our
projects in a hierarchy.</p>
<p><a href="http://richnewman.wordpress.com/2007/07/21/introduction-to-dependency-injection-introduction-to-cabscsf-part-3/">Part 3</a>
introduced dependency injection as a way of structuring our code so
that our class structure was loosely coupled and behaviour could be
easily changed by changing which class was ‘injected’ into another.</p>
<p>In this article I will bring all of these ideas together and explain how dependency injection works in the CAB.</p>
<p><strong>The Problem</strong></p>
<p>We want to get our three projects from <a href="http://richnewman.wordpress.com/2007/07/14/an-introduction-to-the-smart-client-software-factory-and-composite-application-block-part-1-modules-and-shells/">part 1</a> (Red, Blue and Shell) to interact with each other without having them reference each other.  As discussed in <a href="http://richnewman.wordpress.com/2007/07/14/an-introduction-to-the-smart-client-software-factory-and-composite-application-block-part-2-workitems/">part 2</a>,
WorkItems are designed to allow us to do this: we can put a WorkItem in
each project, put code into their various collections, share the
WorkItems and thus share the code.</p>
<p>But how does one project know about the WorkItem from another
project? Bear in mind that there are no direct references between the
projects. This could be done manually in code using reflection, of
course. But the CAB framework gives us a much cleaner way to do this.</p>
<p><strong>Dependency Injection and the CAB</strong></p>
<p>The answer is we can use dependency injection to inject a WorkItem from one project or ‘module’ into another.</p>
<p>This is clearly an appropriate thing to do here: we want loose
coupling between our modules and flexibility to change how they
interact. As I’ve discussed in another article, in extreme cases we
might have different development teams responsible for different
modules, with different release cycles. Using dependency injection one
team could change a class that’s injected and thus change the behaviour
of another module without that module needing to be re-released.</p>
<p>However, unlike in my example in <a href="http://richnewman.wordpress.com/2007/07/21/introduction-to-dependency-injection-introduction-to-cabscsf-part-3/">part 3</a>,
dependency injection in the CAB doesn’t use configuration files to
specify which class should be used. Instead attributes are used to tell
the code that a dependency needs to be injected.</p>
<p><strong>Example</strong></p>
<p>This is most easily seen with an example. We have already seen that
a root WorkItem is created in our CAB application at start up. We have
also seen that all modules listed in the ProfileCatalog.xml file will
get loaded at the start up of a CAB application, and that a Load()
method in a ModuleInit class gets called in each module.</p>
<p>We want a reference to the root WorkItem in a module that is not the
shell. We can achieve this by putting a setter for a WorkItem in our
ModuleInit class for the module, along with an attribute:</p>
<pre>        <font size="2" color="blue" face="Courier">private</font> <font size="2" color="#2b91af" face="Courier">WorkItem</font> <font size="2" color="purple" face="Courier">parentWorkItem</font>;
&nbsp;
        [<font size="2" color="#2b91af" face="Courier">ServiceDependency</font>]
        <font size="2" color="blue" face="Courier">public</font> <font size="2" color="#2b91af" face="Courier">WorkItem</font> <font size="2" color="purple" face="Courier">ParentWorkItem</font>
        {
            <font size="2" color="blue" face="Courier">set</font> { <font size="2" color="purple" face="Courier">parentWorkItem</font> = <font size="2" color="blue" face="Courier">value</font>; }
        }</pre>
<p>As you can see we decorate the setter with the attribute
‘ServiceDependency’. This tells the CAB framework that when it is
loading this module it should look for an appropriate WorkItem to
‘inject’ into this setter.</p>
<p>If we put this code into the RedModuleInit class in our example, and
put a breakpoint in the setter we can see that the root WorkItem is
being passed into here at start up and stored in the parentWorkItem
variable.</p>
<p><strong>How is this Working (1)?</strong></p>
<p>You may wonder how the CAB knows what to inject and where to inject
it here. After all there may be multiple WorkItems in our project:
which one should it choose? Furthermore we can inject different types
(i.e. not WorkItems) in a similar way. If we have several instantiated
classes of the same type how do we inject a specific one? And how does
the CAB find the ServiceDependency attribute? Does it scan all classes
in all modules?</p>
<p>I’m going to leave these issues for now: just accept that the root
WorkItem gets injected in this case. I’ll return to this later in this
article.</p>
<p><strong>Red and Blue Forms Application</strong></p>
<p>So we can get a reference to the root WorkItem as above. In our
naïve CAB application from part 1 we’d quite like to tell the red and
blue forms in the modules to load as MDI children into the shell form.</p>
<p>We can do this by firstly adding the shell form to the Items
collection of the root WorkItem. Then if the root WorkItem is available
in our Red and Blue projects we can access the shell form through the
Items collection.</p>
<p>There’s an AfterShellCreated event of the FormShellApplication class
that we can override in our program class to add the shell form to the
Items collection:</p>
<pre>    <font size="2" color="blue" face="Courier">public</font> <font size="2" color="blue" face="Courier">class</font> <font size="2" color="#2b91af" face="Courier">Program</font> : <font size="2" color="#2b91af" face="Courier">FormShellApplication</font>&lt;<font size="2" color="#2b91af" face="Courier">WorkItem</font>, <font size="2" color="#2b91af" face="Courier">Form1</font>&gt;
    {
        [<font size="2" color="#2b91af" face="Courier">STAThread</font>]
        <font size="2" color="blue" face="Courier">static</font> <font size="2" color="blue" face="Courier">void</font> <font size="2" color="purple" face="Courier">Main</font>()
        {
            <font size="2" color="blue" face="Courier">new</font> <font size="2" color="#2b91af" face="Courier">Program</font>().<font size="2" color="purple" face="Courier">Run</font>();
        }
        <font size="2" color="blue" face="Courier">protected</font> <font size="2" color="blue" face="Courier">override</font> <font size="2" color="blue" face="Courier">void</font> <font size="2" color="purple" face="Courier">AfterShellCreated</font>()
        {
            <font size="2" color="blue" face="Courier">base</font>.<font size="2" color="purple" face="Courier">AfterShellCreated</font>();
            <font size="2" color="blue" face="Courier">this</font>.<font size="2" color="purple" face="Courier">Shell</font>.<font size="2" color="purple" face="Courier">IsMdiContainer</font> = <font size="2" color="blue" face="Courier">true</font>;
            <font size="2" color="purple" face="Courier">RootWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>.<font size="2" color="purple" face="Courier">Add</font>(<font size="2" color="blue" face="Courier">this</font>.<font size="2" color="purple" face="Courier">Shell</font>, <font size="2" color="#a31515" face="Courier">"Shell"</font>);
        }
    }</pre>
<p>Note that the shell gets a name in the Items collection (“Shell”).
Note also that we’re making the shell form into an MDIContainer here,
accessing it via the Shell property of the FormShellApplication class.</p>
<p>In the Load method of our modules we can now retrieve the shell form
and set it to be the MDIParent of our red and blue forms. So our
ModuleInit class looks as below:</p>
<pre>    <font size="2" color="blue" face="Courier">public</font> <font size="2" color="blue" face="Courier">class</font> <font size="2" color="#2b91af" face="Courier">RedModuleInit</font> : <font size="2" color="#2b91af" face="Courier">ModuleInit</font>
    {
        <font size="2" color="blue" face="Courier">private</font> <font size="2" color="#2b91af" face="Courier">WorkItem</font> <font size="2" color="purple" face="Courier">parentWorkItem</font>;
&nbsp;
        [<font size="2" color="#2b91af" face="Courier">ServiceDependency</font>]
        <font size="2" color="blue" face="Courier">public</font> <font size="2" color="#2b91af" face="Courier">WorkItem</font> <font size="2" color="purple" face="Courier">ParentWorkItem</font>
        {
            <font size="2" color="blue" face="Courier">set</font> { <font size="2" color="purple" face="Courier">parentWorkItem</font> = <font size="2" color="blue" face="Courier">value</font>; }
        }
&nbsp;
        <font size="2" color="blue" face="Courier">public</font> <font size="2" color="blue" face="Courier">override</font> <font size="2" color="blue" face="Courier">void</font> <font size="2" color="purple" face="Courier">Load</font>()
        {
            <font size="2" color="blue" face="Courier">base</font>.<font size="2" color="purple" face="Courier">Load</font>();
            <font size="2" color="#2b91af" face="Courier">Form</font> <font size="2" color="purple" face="Courier">shell</font> = (<font size="2" color="#2b91af" face="Courier">Form</font>)<font size="2" color="purple" face="Courier">parentWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>[<font size="2" color="#a31515" face="Courier">"Shell"</font>];
            <font size="2" color="#2b91af" face="Courier">Form1</font> <font size="2" color="purple" face="Courier">form</font> = <font size="2" color="blue" face="Courier">new</font> <font size="2" color="#2b91af" face="Courier">Form1</font>();
            <font size="2" color="purple" face="Courier">form</font>.<font size="2" color="purple" face="Courier">MdiParent</font> = <font size="2" color="purple" face="Courier">shell</font>;
            <font size="2" color="purple" face="Courier">form</font>.<font size="2" color="purple" face="Courier">Show</font>();
        }
    }</pre>
<p>If we now run the application our red and blue forms will appear as MDI children of the main shell.</p>
<p><a href="http://www.richnewman.plus.com/BasicMDIApplication.zip" title="CAB Basic MDI Example">The code for this is available</a>.
By the way you should know that there are better ways of setting up an
MDI application in the CAB: this example is intended to just show the
basic concepts of dependency injection.</p>
<p><strong>How is this Working (2)?</strong></p>
<p>Earlier in this article I posed several questions about how all this
could be working. I’ll attempt to answer those questions now.</p>
<p>As discussed earlier, WorkItems are generic containers for code to
be passed between modules, and are capable of being arranged in a
hierarchy. But in addition they are actually ‘Inversion of Control
containers’ or ‘Dependency Injection containers’. I mentioned these in <a href="http://richnewman.wordpress.com/2007/08/04/an-aside-on-inversion-of-control-dependency-inversion-and-dependency-injection-introduction-to-cabscsf-part-4/">part 4</a>
of this series of articles. However, I’ve rather glossed over them up
until now. Note that both Spring and PicoContainer use containers to
control their dependency injection.</p>
<p><strong>WorkItems as Dependency Injection Containers</strong></p>
<p>These containers work in the CAB as follows. Suppose we want to
inject object A into object B. The dependency injection only happens
when object B is added into an appropriate collection on a WorkItem.
This can be on creation of the object if we create object B with the
AddNew method, or it can happen with an existing object if we use the
Add method to add it to a WorkItem collection.</p>
<p>Furthermore normally the injection can only work if object A is
already in an appropriate collection of the same WorkItem. The
exception is if we are using the ‘CreateNew’ attribute (see below). In
this case object A will be created and added to the Items collection of
the WorkItem before being injected.</p>
<p>As you can see, in a way dependency injection in the CAB is ‘scoped’ to a WorkItem.</p>
<p><strong>Types of Dependency Injection in the CAB</strong></p>
<p>There are three attributes that can be attached to setters and used for dependency injection in the CAB:</p>
<ol>
<li>ComponentDependency(string Id)<br>
This attribute can be used to inject any object that already exists in
a WorkItem’s Items collection. However, because we can have multiple
objects of the same type in this collection we have to know the ID of
the item we want to inject (which is a string). We can specify an ID
when we add our object into the collection. If we don’t specify an ID
the CAB assigns a random GUID to the item as an ID. Note that if the
object does not exist in the appropriate Items collection when we try
to inject it then the CAB will throw a DependencyMissingException.</li>
<li>ServiceDependency<br>
We’ve seen this attribute already. An object must be in the WorkItem’s
Services collection to be injected using this attribute. The Services
collection can only contain one object of any given type, which means
that the type of the setter specifies the object uniquely without the
need for an ID. I will discuss Services further in part 6 of this
series of articles.</li>
<li>CreateNew<br>
A new object of the appropriate type will be created and injected if
this attribute is attached to a setter. The new object will be added to
the WorkItem’s Items collection.</li>
</ol>
<p>As usual this is best seen with an example.</p>
<p><strong>Example</strong></p>
<p>We set up a CAB project with two component classes. Component1 is
just an empty class, whilst Component2 has two private Component1
member variables that will be injected. One will be injected by name
(and so needs to be created and added to the WorkItem’s Items
collection prior to injection). One will be injected by being created:</p>
<pre>    <font size="2" color="blue" face="Courier">public</font> <font size="2" color="blue" face="Courier">class</font> <font size="2" color="#2b91af" face="Courier">Component2</font>
    {
        <font size="2" color="blue" face="Courier">private</font> <font size="2" color="#2b91af" face="Courier">Component1</font> <font size="2" color="purple" face="Courier">component11</font>;
        [<font size="2" color="#2b91af" face="Courier">ComponentDependency</font>(<font size="2" color="#a31515" face="Courier">"FirstComponent1"</font>)]
        <font size="2" color="blue" face="Courier">public</font> <font size="2" color="#2b91af" face="Courier">Component1</font> <font size="2" color="purple" face="Courier">Component11</font>
        {
            <font size="2" color="blue" face="Courier">set</font> { <font size="2" color="purple" face="Courier">component11</font> = <font size="2" color="blue" face="Courier">value</font>; }
        }
&nbsp;
        <font size="2" color="blue" face="Courier">private</font> <font size="2" color="#2b91af" face="Courier">Component1</font> <font size="2" color="purple" face="Courier">component12</font>;
        [<font size="2" color="#2b91af" face="Courier">CreateNew</font>]
        <font size="2" color="blue" face="Courier">public</font> <font size="2" color="#2b91af" face="Courier">Component1</font> <font size="2" color="purple" face="Courier">Component12</font>
        {
            <font size="2" color="blue" face="Courier">set</font> { <font size="2" color="purple" face="Courier">component12</font> = <font size="2" color="blue" face="Courier">value</font>; }
        }
    }</pre>
<p>To use this we put the following code in the AfterShellCreated method of our FormShellApplication class:</p>
<pre>        <font size="2" color="blue" face="Courier">protected</font> <font size="2" color="blue" face="Courier">override</font> <font size="2" color="blue" face="Courier">void</font> <font size="2" color="purple" face="Courier">AfterShellCreated</font>()
        {
            <font size="2" color="purple" face="Courier">RootWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>.<font size="2" color="purple" face="Courier">AddNew</font>&lt;<font size="2" color="#2b91af" face="Courier">Component1</font>&gt;(<font size="2" color="#a31515" face="Courier">"FirstComponent1"</font>);
            <font size="2" color="#2b91af" face="Courier">Component2</font> <font size="2" color="purple" face="Courier">component2</font> = <font size="2" color="blue" face="Courier">new</font> <font size="2" color="#2b91af" face="Courier">Component2</font>();
            <font size="2" color="purple" face="Courier">RootWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>.<font size="2" color="purple" face="Courier">Add</font>(<font size="2" color="purple" face="Courier">component2</font>);
            <font size="2" color="purple" face="Courier">DisplayRootItemsCollection</font>();
        }</pre>
<p>Notice the syntax of the AddNew command for the Items collection.
It’s a generic method. Remember that a generic is simply a way of
providing a type (in this case a class) at runtime. Here we are
providing the type “Component1” to the AddNew generic method. A generic
method can do anything it likes with the type provided. Here AddNew
will instantiate that type and add it to the items collection.</p>
<p>As you can see, we create a Component1 object with ID
“FirstComponent1” and add it to the Items collection. We then create a
Component2 object using the ‘new’ keyword. We would usually do this
using AddNew, but I want to demonstrate that we don’t have to do this.
Next we add the Component2 object to the Items collection.</p>
<p>At this point the “FirstComponent1” object will be injected into
component2 in the setter marked with the “ComponentDependency”
attribute. Also another Component1 object will be created and injected
into component2 in the setter marked with the “CreateNew” attribute.</p>
<p>Finally in this code we call a routine called DisplayRootItemsCollection:</p>
<pre>        <font size="2" color="blue" face="Courier">private</font> <font size="2" color="blue" face="Courier">void</font> <font size="2" color="purple" face="Courier">DisplayRootItemsCollection</font>()
        {
            <font size="2" color="purple" face="Courier">System</font>.<font size="2" color="purple" face="Courier">Diagnostics</font>.<font size="2" color="#2b91af" face="Courier">Debug</font>.<font size="2" color="purple" face="Courier">WriteLine</font>(<font size="2" color="#a31515" face="Courier">"ITEMS:"</font>);
            <font size="2" color="purple" face="Courier">Microsoft</font>.<font size="2" color="purple" face="Courier">Practices</font>.<font size="2" color="purple" face="Courier">CompositeUI</font>.<font size="2" color="purple" face="Courier">Collections</font>.<font size="2" color="#2b91af" face="Courier">ManagedObjectCollection</font>&lt;<font size="2" color="blue" face="Courier">object</font>&gt; <font size="2" color="purple" face="Courier">coll</font> = <font size="2" color="purple" face="Courier">RootWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>;
            <font size="2" color="blue" face="Courier">foreach</font> (<font size="2" color="purple" face="Courier">System</font>.<font size="2" color="purple" face="Courier">Collections</font>.<font size="2" color="purple" face="Courier">Generic</font>.<font size="2" color="#2b91af" face="Courier">KeyValuePair</font>&lt;<font size="2" color="blue" face="Courier">string</font>, <font size="2" color="blue" face="Courier">object</font>&gt; <font size="2" color="purple" face="Courier">o</font> <font size="2" color="blue" face="Courier">in</font> <font size="2" color="purple" face="Courier">coll</font>)
            {
                <font size="2" color="purple" face="Courier">System</font>.<font size="2" color="purple" face="Courier">Diagnostics</font>.<font size="2" color="#2b91af" face="Courier">Debug</font>.<font size="2" color="purple" face="Courier">WriteLine</font>(<font size="2" color="purple" face="Courier">o</font>.<font size="2" color="purple" face="Courier">ToString</font>());
            }
        }</pre>
<p>This just dumps out all the objects in the Items collection to the debug window.  The results are as below:</p>
<p><font color="#993300">ITEMS:<br>
[4e0f206b-b27e-4017-a1b2-862f952686da, Microsoft.Practices.CompositeUI.State]<br>
[14a0b6a2-12a4-4904-8148-c65802af763d, Shell.Form1, Text: Form1]<br>
[FirstComponent1, Shell.Component1]<br>
[4c7e0a20-90b7-42c6-8912-44ecba40523f, Shell.Component2]<br>
[c40a4626-47e7-4324-876a-6bf0bf99c754, Shell.Component1]</font></p>
<p>As you can see we’ve got two Component1 items as expected, one with
ID “FirstComponent1” and one with ID a GUID. And we have one Component2
item as expected. We can also see that the shell form is added to the
Items collection, as well as a State object.</p>
<p><a href="http://www.richnewman.plus.com/CABDI1.zip" title="CAB Dependency Injection Example 1">The code for this is available</a>, and if you single-step through it you can see the two Component1 objects being injected into component2.</p>
<p><strong>Where Was All This in the Original Example?</strong></p>
<p>Note that in the original example in this article the root WorkItem
was injected into a ModuleInit class apparently without the ModuleInit
class being added to any WorkItem. This seems to contradict the
paragraphs above that say that we can only inject into objects that are
put into WorkItems. However, the CAB framework automatically adds
ModuleInit classes into the root WorkItem when it creates a module, so
we don’t need to explicitly add them ourselves for the dependency
injection to work.</p>
<p>Futhermore, the root WorkItem that was injected as a
ServiceDependency even though it had not been explicitly added to any
Services collection. Again this seems to contradict the statements
above that any object being injected must be in an appropriate
collection. But the code works because any WorkItem is automatically a
member of its own Services collection.</p>
<p><a href="http://www.richnewman.plus.com/BasicMDIApplication2.zip" title="CAB Basic MDI Example Extended">You can see this if you download and run this example</a>.
It is an extension of the original example that allows you to output
both the Items collection and the Services collection to the output
window via a menu option. If you do this after the application has
loaded you get the output below:</p>
<p><font color="#993300">ITEMS:<br>
[336ad842-e365-47dd-8a52-215b951ff2d1, Microsoft.Practices.CompositeUI.State]<br>
[185a6eb5-3685-4fa7-a6ee-fc350c7e75c4, Shell.Form1, Text: Form1]<br>
[10d63e89-4af8-4b0d-919f-565a8a952aa9, Shell.MyComponent]<br>
[Shell, Shell.Form1, Text: Form1]<br>
[21ac50d7-3f22-4560-a433-610da21c23ab, Blue.BlueModuleInit]<br>
[e66dee6e-48fb-47f0-b48e-b0eebbf4e31b, Red.RedModuleInit]<br>
SERVICES:<br>
[Microsoft.Practices.CompositeUI.WorkItem, Microsoft.Practices.CompositeUI.WorkItem]<br>
…(Complete list truncated to save space)</font></p>
<p>You can see that both the BlueModuleInit and RedModuleInit objects
are in the Items collection in spite of not being explicitly added by
user code, and the WorkItem is in the Services collection.</p>
<p><strong>ObjectBuilder</strong></p>
<p>To understand and use the Composite Application Block you don’t need
to understand in detail its underlying code. It’s intended to be used
as a framework after all. However, it’s useful to know that the
dependency injection here is all done by the ObjectBuilder component.</p>
<p>When we call AddNew or Add on a collection of a WorkItem it’s the
ObjectBuilder that looks at the dependency attributes on the class
we’re adding and injects the appropriate objects.</p>
<p>The ObjectBuilder is a ‘builder’ in the classic design patterns sense.  The <a href="http://www.dofactory.com/Patterns/PatternBuilder.aspx">builder pattern</a>
‘separates the construction of a complex object from its representation
so that the same construction process can create different
representations’.</p>
<p>Note that this pattern is often called a ‘factory pattern’, although
factories in the Gang of Four ‘Design Patterns’ book are slightly
different things (we’re not creating families of objects (<a href="http://www.dofactory.com/Patterns/PatternAbstract.aspx">Abstract Factory</a>) or ‘letting ‘the subclasses decide which class to instantiate’ (<a href="http://www.dofactory.com/Patterns/PatternFactory.aspx">Factory Method</a>)).</p>
<p><strong>WorkItems in a Hierarchy and Dependency Injection of Items</strong></p>
<p>As discussed previously, one of the strengths of WorkItems is that
multiple instances can be instantiated in different modules, and they
can all be arranged in a hierarchy. This is because each WorkItem has a
WorkItems collection. However, you should be aware that dependency
injection only works for items in the current WorkItem. If you attempt
to inject an object in a different WorkItem in the hierarchy into an
object in your WorkItem you will get a DependencyMissingException.</p>
<p>We can see this by modifying the AfterShellCreated event of our
FormShellApplication in the example using Component1 and Component2
above:</p>
<pre>        <font size="2" color="#2b91af" face="Courier">WorkItem</font> <font size="2" color="purple" face="Courier">testWorkItem</font> = <font size="2" color="blue" face="Courier">null</font>;
        <font size="2" color="blue" face="Courier">protected</font> <font size="2" color="blue" face="Courier">override</font> <font size="2" color="blue" face="Courier">void</font> <font size="2" color="purple" face="Courier">AfterShellCreated</font>()
        {
            <font size="2" color="purple" face="Courier">testWorkItem</font> = <font size="2" color="purple" face="Courier">RootWorkItem</font>.<font size="2" color="purple" face="Courier">WorkItems</font>.<font size="2" color="purple" face="Courier">AddNew</font>&lt;<font size="2" color="#2b91af" face="Courier">WorkItem</font>&gt;();
            <font size="2" color="purple" face="Courier">RootWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>.<font size="2" color="purple" face="Courier">AddNew</font>&lt;<font size="2" color="#2b91af" face="Courier">Component1</font>&gt;(<font size="2" color="#a31515" face="Courier">"FirstComponent1"</font>);
            <font size="2" color="green" face="Courier">// The next line throws an exception as the testWorkItem</font>
            <font size="2" color="green" face="Courier">// container doesn't know about FirstComponent1, and Component2</font>
            <font size="2" color="green" face="Courier">// is asking for it to be injected.</font>
            <font size="2" color="purple" face="Courier">testWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>.<font size="2" color="purple" face="Courier">AddNew</font>&lt;<font size="2" color="#2b91af" face="Courier">Component2</font>&gt;();
            <font size="2" color="purple" face="Courier">DisplayRootItemsCollection</font>();
        }</pre>
<p>Here we add a new WorkItem to our RootWorkItem. We add an instance
of Component1 with ID “FirstComponent1” to our RootWorkItem as before.
Then we add an instance of Component2 to our testWorkItem.</p>
<p>Remember that Component2 asks for a Component1 object with ID
“FirstComponent1” to be injected when it is created. Because the
testWorkItem knows nothing about such an object we get an exception
thrown.</p>
<p>We can fix the code by adding our Component1 into the testWorkItem instead of the RootWorkItem:</p>
<pre><font size="2" color="purple" face="Courier">testWorkItem</font>.<font size="2" color="purple" face="Courier">Items</font>.<font size="2" color="purple" face="Courier">AddNew</font>&lt;<font size="2" color="#2b91af" face="Courier">Component1</font>&gt;(<font size="2" color="#a31515" face="Courier">"FirstComponent1"</font>);</pre>
<p><a href="http://www.richnewman.plus.com/CABDI2.zip" title="CAB Dependency Injection Example 2">The code for this example is available.</a></p>
<p><strong>WorkItems in a Hierarchy and Dependency Injection of Services</strong></p>
<p>Services behave differently to the example given above.</p>
<p>We can make Component1 a service by adding it to the Services
collection of the RootWorkItem instead of the Items collection, and
telling Component2 it’s a ServiceDependency and not a
ComponentDependency. Then the code will work. This is because the CAB
includes a service locator that looks in all parent WorkItems of the
current WorkItem to see if a given service is available. I will discuss
this in more detail in part 6.</p>
<p><strong>Conclusion</strong></p>
<p>Dependency injection in the CAB is a powerful tool.  It enables us to share code between modules in a loosely-coupled way.</p>
<p>In <a href="http://richnewman.wordpress.com/2007/09/04/constructor-injection-in-the-cab-introduction-to-the-cabscsf-part-6/">part 6</a>
of this series of articles I discuss how we can use the CAB to do
constructor injection. Part 7 of the series will investigate the
Services collection of a WorkItem in some detail.</p>
<div style="margin-top: 1em;" class="possibly-related"><hr><p><strong>Possibly related posts: (automatically generated)</strong></p><ul><li><a rel="related" href="http://richnewman.wordpress.com/2007/07/14/an-introduction-to-the-smart-client-software-factory-and-composite-application-block-part-2-workitems/" style="font-weight: bold;">An Introduction to the Smart Client Software Factory and Composite Applicat…</a></li><li><a rel="related" href="http://richnewman.wordpress.com/2007/10/27/introduction-to-smartparts-and-workspaces-introduction-to-cabscsf-part-15/" style="font-weight: bold;">Introduction to SmartParts and Workspaces (Introduction to CAB/SCSF Part 15)</a></li><li><a rel="related" href="http://richnewman.wordpress.com/2007/07/27/composite-application-block-mdiworkspace-sample/" style="font-weight: bold;">Composite Application Block MdiWorkspace Sample</a></li></ul></div></div>	</div>

	<div class="feedback">
                        <a href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/#comments" title="Comment on Dependency Injection and the Composite Application Block (Introduction to CAB/SCSF Part&nbsp;5)">Comments (14)</a>	</div>

</div>

<h2 id="comments">14 Comments 
	<a href="#postcomment" title="Leave a comment">»</a>
</h2>

<ol id="commentlist" class="snap_preview">
<li id="comment-212">
	<div id="div-comment-212" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/efa07b6541b057d3ebae8bb5bad57fc7.png" class="avatar avatar-32" width="32" height="32">	<p>Thanks
so much for your CAB postings. I have searched the web trying to find a
clear explanation for CAB. You are the only one that has provided it
that I have found. I look forward to future installments.</p>
	<p><cite>Comment by <span class="fn">Terry</span> — August 14, 2007 @ <a href="#comment-212">7:37 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=212#respond" onclick='return addComment.moveForm("div-comment-212", "212", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-325">
	<div id="div-comment-325" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/664db2dea89a684ae158b5130f781eb1.png" class="avatar avatar-32" width="32" height="32">	<p>Thank
you for this series of posts on CAB. I’m finally going to be using
CAB/SCSF and have found your posts very useful indeed. Keep them coming!</p>
	<p><cite>Comment by <span class="fn">Anthony Mason</span> — August 22, 2007 @ <a href="#comment-325">8:46 am</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=325#respond" onclick='return addComment.moveForm("div-comment-325", "325", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-465">
	<div id="div-comment-465" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/78125d2b90ad31adbbfede1ffb83d06c.png" class="avatar avatar-32" width="32" height="32">	<p>Thanks Newman, Excellent articles n CAB,slowly introducing the concepts.</p>
	<p><cite>Comment by <span class="fn">Kumaresan</span> — August 30, 2007 @ <a href="#comment-465">3:31 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=465#respond" onclick='return addComment.moveForm("div-comment-465", "465", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-951">
	<div id="div-comment-951" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/8b5c0fbffaac11169e915beaf6a0a8eb.png" class="avatar avatar-32" width="32" height="32">	<p>Thanks Newman, I am now beginning to understand CAB, your postings have helped me a good level. Keep up the good work.</p>
	<p><cite>Comment by <span class="fn">Abel Goodman</span> — October 3, 2007 @ <a href="#comment-951">7:06 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=951#respond" onclick='return addComment.moveForm("div-comment-951", "951", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-1018">
	<div id="div-comment-1018" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/c838a2cd74ce3c9a65a64000c232103a.png" class="avatar avatar-32" width="32" height="32">	<p>What are the areas in which the object buider comes in.Does it have a performance penalty</p>
	<p><cite>Comment by <span class="fn">NG</span> — October 9, 2007 @ <a href="#comment-1018">6:33 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=1018#respond" onclick='return addComment.moveForm("div-comment-1018", "1018", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-1152">
	<div id="div-comment-1152" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/d326b5abdea0ea4bce4d1a79b2f52842.png" class="avatar avatar-32" width="32" height="32">	<p>Nice series, Rich.<br>
In your next session you discuss some of the problems with Constructor
injection … and missed an important one; I’ll save my comment for that
one.<br>
Here you have a section entitled “Types of Dependency Injection in the
CAB” … which describes the attributes. This may confuse people. The
usual coverage of this topic observes that CAB supports 3 types of
injection: constructor, property, method. You show property injection
in this session and constructor injection in the next session.<br>
I didn’t see you touch on method injection which happens to be my
favorite for reasons I hope to explain in comments to session 6.<br>
Keep up the great work</p>
	<p><cite>Comment by <span class="fn">Ward Bell</span> — October 25, 2007 @ <a href="#comment-1152">6:56 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=1152#respond" onclick='return addComment.moveForm("div-comment-1152", "1152", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-1153">
	<div id="div-comment-1153" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/d326b5abdea0ea4bce4d1a79b2f52842.png" class="avatar avatar-32" width="32" height="32">	<p>Oops.
I see you DID cover two of the CAB injection types in session 3. Excuse
me for skipping ahead. You passed on Method injection about which I’ll
say a few words in comments to Session 6.<br>
P.S.: To be clear, method injection is not the same as interface
injection; CAB does not offer an interface injection mechanism as far
as I know.</p>
	<p><cite>Comment by <span class="fn">Ward Bell</span> — October 25, 2007 @ <a href="#comment-1153">8:58 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=1153#respond" onclick='return addComment.moveForm("div-comment-1153", "1153", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-2702">
	<div id="div-comment-2702" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/a.png" class="avatar avatar-32" width="32" height="32">	<p>Hi Rich<br>
Your articles are very easy to understand . It is like reading a
thriller story book. You are the only person who could explain CAB in
such a great way. I just read till part 5, and continue to read the
remaning. Thank you very much.</p>
	<p><cite>Comment by <span class="fn">Sujith</span> — May 29, 2008 @ <a href="#comment-2702">11:07 am</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=2702#respond" onclick='return addComment.moveForm("div-comment-2702", "2702", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-2717">
	<div id="div-comment-2717" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/a.png" class="avatar avatar-32" width="32" height="32">	<p>Rich, you can explain these complex CAB concepts in such a simple way. Really amazing!<br>
I can’t wait to continue reading your articles! </p>
<p>Thanks a lot!</p>
	<p><cite>Comment by <span class="fn">Jowan</span> — June 12, 2008 @ <a href="#comment-2717">8:33 am</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=2717#respond" onclick='return addComment.moveForm("div-comment-2717", "2717", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-2921">
	<div id="div-comment-2921" class="vcard">
		<p>[...]
package all poorly constructed and even poorer explained. The answers I
was looking for I found in this excellent blog of Rich Newman where I
found out how exactly does module initialization [...]</p>
	<p><cite>Pingback by <span class="fn"><a href="http://orbit-x.de/blog/index.php/2008/11/28/composite-ui-application-block-modules-explained/" rel="external nofollow" class="url">Reinis blog » Composite UI Application Block: Modules explained</a></span> — November 28, 2008 @ <a href="#comment-2921">1:41 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=2921#respond" onclick='return addComment.moveForm("div-comment-2921", "2921", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-2985">
	<div id="div-comment-2985" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/a.png" class="avatar avatar-32" width="32" height="32">	<p>HI Rich,</p>
<p>I am very much impressed with this article on CAB, it is the best
article available online on CAB and Dependency Injection specially for
people who are new to these concepts.<br>
Keep doing this good work.</p>
<p>Thanks a lot.</p>
	<p><cite>Comment by <span class="fn">Schaffer</span> — January 20, 2009 @ <a href="#comment-2985">10:08 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=2985#respond" onclick='return addComment.moveForm("div-comment-2985", "2985", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-2987">
	<div id="div-comment-2987" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/1be3646f21b6682d70246307b5450eba.png" class="avatar avatar-32" width="32" height="32">	<p>I
am new to this; hence my reading of these articles. However I am really
not getting it. To me it seems that there is a lot of work and
abstraction going on to “decouple” and the objects still need to know
about one another. Component2 needs to know about component1 so that it
can be injected (the attribute references the name and an object of
type component1 is created) and the Shell has to know about the
components to “type” the generic as it adds them. </p>
<p>Admittedly, I have never really worked with attributes or
(obviously) CAB, so I am certain of my ignorance, but I don’t know what
I don’t know. Moreover, I truly appreciate all the effort you have gone
through explaining this. But sadly, thus far, I am too dense to get it.
Can you dumb it down for this ignorant soul?</p>
	<p><cite>Comment by <span class="fn">Jason</span> — January 21, 2009 @ <a href="#comment-2987">11:13 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=2987#respond" onclick='return addComment.moveForm("div-comment-2987", "2987", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-3075">
	<div id="div-comment-3075" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/2821d4ca7cec394ca9d04f2af631ddb1.png" class="avatar avatar-32" width="32" height="32">	<p>I
haven’t found any other article on the internet which is as simple and
understandable as this. I used to struggle with these frameworks and
its concepts, but now everything looks very easy to me after reading
your articles.</p>
	<p><cite>Comment by <span class="fn">Pradeep</span> — May 7, 2009 @ <a href="#comment-3075">9:06 am</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=3075#respond" onclick='return addComment.moveForm("div-comment-3075", "3075", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
<li id="comment-3109">
	<div id="div-comment-3109" class="vcard">
	<img alt="" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/eceb5a4b978f3f9443b935d6e9bcc943.png" class="avatar avatar-32" width="32" height="32">	<p>Rich,</p>
<p>Your articles are great!  Easy to read and understand.</p>
<p>My only suggestion is a better way to navigate from article to
article in a series. In general I found it hard to get around without
having to go back to the table of contents. It’s not going to keep me
from reading your blog, but I figured you would like the feedback.</p>
	<p><cite>Comment by <span class="fn"><a href="http://www.dustintownsend.com/" rel="external nofollow" class="url">Dustin</a></span> — June 12, 2009 @ <a href="#comment-3109">1:26 pm</a></cite> </p>
	<div class="reply">
		<a rel="nofollow" class="comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/?replytocom=3109#respond" onclick='return addComment.moveForm("div-comment-3109", "3109", "respond", "80")'>Reply</a>	</div>
	</div>
</li>
</ol>

<div class="navigation">
	<div class="alignleft"></div>
	<div class="alignright"></div>
</div>
<br>


<p><a href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/feed/"><abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.</a> 
	<a href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/trackback/" rel="trackback">TrackBack <abbr title="Uniform Resource Identifier">URI</abbr></a>
</p>

<div id="respond">
<h2 id="postcomment">Leave a comment</h2>
<div id="cancel-comment-reply"><small><a rel="nofollow" id="cancel-comment-reply-link" href="http://richnewman.wordpress.com/2007/08/05/dependency-injection-and-the-composite-application-block-introduction-to-cabscsf-part-5/#respond" style="display: none;">Click here to cancel reply.</a></small></div>


<form action="http://richnewman.wordpress.com/wp-comments-post.php" method="post" id="commentform">


<p><input name="author" id="author" value="" size="22" tabindex="1" type="text">
<label for="author"><small>Name </small></label></p>

<p><input name="email" id="email" value="" size="22" tabindex="2" type="text">
<label for="email"><small>Mail (will not be published) </small></label></p>

<p><input name="url" id="url" value="" size="22" tabindex="3" type="text">
<label for="url"><small>Website</small></label></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;pre&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->

<p><textarea name="comment" id="comment" cols="100" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" id="submit" tabindex="5" value="Submit Comment" type="submit">
<input name="comment_post_ID" value="80" id="comment_post_ID" type="hidden">
<input name="comment_parent" id="comment_parent" value="0" type="hidden">
</p>

<input name="genseq" value="1246694867" type="hidden">
<p><input name="subscribe" id="subscribe" value="subscribe" style="width: auto;" type="checkbox">
		<label for="subscribe" id="subscribe-label">Notify me of follow-up comments via email.</label></p>
</form>

</div>



<!-- begin footer -->
</div>


<!-- begin sidebar -->
<div id="menu">

<ul>
<li id="search-2" class="widget widget_search"><form role="search" method="get" id="searchform" action="http://richnewman.wordpress.com/">
	<div><label class="screen-reader-text" for="s">Search for:</label>
	<input value="" name="s" id="s" type="text">
	<input id="searchsubmit" value="Search" type="submit">
	</div>
	</form></li>
		<li id="text-2" class="widget widget_text">			<h2 class="widgettitle">recent posts</h2>
			<div class="textwidget"><a href="http://richnewman.wordpress.com/2009/06/06/running-visual-studio-as-an-administrator-under-windows-vista/">Running Visual Studio as an Administrator under Windows Vista</a><br><br>

<a href="http://richnewman.wordpress.com/2008/02/23/table-of-contents-introduction-to-using-financial-products-markup-language-fpml-with-microsoft-net-tools/">Introduction to using Financial Products Markup Language (FpML) with Microsoft .NET Tools</a><br><br>

<a href="http://richnewman.wordpress.com/intro-to-cab-toc/">An Introduction to the Smart Client Software Factory and Composite Application Block</a> <br><br>

<a href="http://richnewman.wordpress.com/2007/12/09/a-beginners-guide-to-credit-default-swaps/">beginner's guide to credit default swaps</a><br><br>

<a href="http://richnewman.wordpress.com/2007/10/26/user-interface-design-for-business-applications/">User Interface Design for Business Applications</a><br><br>

<a href="http://richnewman.wordpress.com/2007/08/04/some-thoughts-on-soa-and-application-design-using-the-cabscsf/">Some Thoughts on SOA and Application Design using the CAB/SCSF</a> <br><br>

<a href="http://richnewman.wordpress.com/2007/07/01/c-and-vbnet-line-count-utility/">C# And VB.NET Line Count Utility</a> <br><br>

<a href="http://richnewman.wordpress.com/2007/06/24/a-beginner%e2%80%99s-guide-to-the-black-scholes-option-pricing-formula-part-1/">Beginner’s Guide to the Black-Scholes Option Pricing Formula</a> <br><br>

<a href="http://richnewman.wordpress.com/2007/04/29/using-hsl-color-hue-saturation-luminosity-to-create-better-looking-guis-part-1/">Using HSL Color to Create Better-Looking GUIs</a> <br><br>

<a href="http://richnewman.wordpress.com/2007/04/15/a-beginner%e2%80%99s-guide-to-calling-a-net-library-from-excel/">Beginner's Guide to Calling a .NET Library from Excel</a><br><br>

<a href="http://richnewman.wordpress.com/2007/04/08/top-level-exception-handling-in-windows-forms-applications-part-1/">Top-level Exception Handling in Windows Forms Applications</a><br><br>

<a href="http://richnewman.wordpress.com/2007/03/23/comparing-values-in-net-identity-and-equivalence-part-1/">Comparing Values for Equality in .NET: Identity and Equivalence</a><br><br></div>
		</li>
		<li id="text-3" class="widget widget_text">			<h2 class="widgettitle">pages</h2>
			<div class="textwidget"><a href="http://richnewman.wordpress.com/about/">About Me</a> <br><br></div>
		</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
			<li><a href="http://richnewman.wordpress.com/2009/06/" title="June 2009">June 2009</a>&nbsp;(2)</li>
	<li><a href="http://richnewman.wordpress.com/2008/03/" title="March 2008">March 2008</a>&nbsp;(3)</li>
	<li><a href="http://richnewman.wordpress.com/2008/02/" title="February 2008">February 2008</a>&nbsp;(4)</li>
	<li><a href="http://richnewman.wordpress.com/2008/01/" title="January 2008">January 2008</a>&nbsp;(3)</li>
	<li><a href="http://richnewman.wordpress.com/2007/12/" title="December 2007">December 2007</a>&nbsp;(6)</li>
	<li><a href="http://richnewman.wordpress.com/2007/11/" title="November 2007">November 2007</a>&nbsp;(3)</li>
	<li><a href="http://richnewman.wordpress.com/2007/10/" title="October 2007">October 2007</a>&nbsp;(5)</li>
	<li><a href="http://richnewman.wordpress.com/2007/09/" title="September 2007">September 2007</a>&nbsp;(8)</li>
	<li><a href="http://richnewman.wordpress.com/2007/08/" title="August 2007">August 2007</a>&nbsp;(6)</li>
	<li><a href="http://richnewman.wordpress.com/2007/07/" title="July 2007">July 2007</a>&nbsp;(8)</li>
	<li><a href="http://richnewman.wordpress.com/2007/06/" title="June 2007">June 2007</a>&nbsp;(4)</li>
	<li><a href="http://richnewman.wordpress.com/2007/05/" title="May 2007">May 2007</a>&nbsp;(2)</li>
	<li><a href="http://richnewman.wordpress.com/2007/04/" title="April 2007">April 2007</a>&nbsp;(5)</li>
	<li><a href="http://richnewman.wordpress.com/2007/03/" title="March 2007">March 2007</a>&nbsp;(5)</li>
		</ul>
</li>
		<li id="text-1" class="widget widget_text">						<div class="textwidget"><a href="http://richnewman.wordpress.com/feed"><img src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/e28.png"></a> </div>
		</li>
<li id="pages-2" class="widget widget_pages"><h2 class="widgettitle">Pages</h2>
		<ul>
			<li class="page_item page-item-2"><a href="http://richnewman.wordpress.com/about/" title="About">About</a></li>
<li class="page_item page-item-79"><a href="http://richnewman.wordpress.com/attempted-solutions-to-random-numbers-problem/" title="Attempted Solutions to Random Numbers&nbsp;Problem">Attempted Solutions to Random Numbers&nbsp;Problem</a></li>
<li class="page_item page-item-67"><a href="http://richnewman.wordpress.com/dependency-injection-example-constructor-injection/" title="Dependency Injection Example: Constructor&nbsp;Injection">Dependency Injection Example: Constructor&nbsp;Injection</a></li>
<li class="page_item page-item-69"><a href="http://richnewman.wordpress.com/dependency-injection-example-interface-injection/" title="Dependency Injection Example: Interface&nbsp;Injection">Dependency Injection Example: Interface&nbsp;Injection</a></li>
<li class="page_item page-item-68"><a href="http://richnewman.wordpress.com/dependency-injection-example-setter-injection/" title="Dependency Injection Example: Setter&nbsp;Injection">Dependency Injection Example: Setter&nbsp;Injection</a></li>
<li class="page_item page-item-39"><a href="http://richnewman.wordpress.com/hslcolor-class/" title="HSLColor&nbsp;Class">HSLColor&nbsp;Class</a></li>
<li class="page_item page-item-76"><a href="http://richnewman.wordpress.com/weirdinteger-an-example-of-the-use-of-icomparable/" title="Inversion of Control in .NET: an example of the use of&nbsp;IComparable">Inversion of Control in .NET: an example of the use of&nbsp;IComparable</a></li>
<li class="page_item page-item-100"><a href="http://richnewman.wordpress.com/intro-to-cab-toc/" title="Table of Contents: Introduction to&nbsp;CAB/SCSF">Table of Contents: Introduction to&nbsp;CAB/SCSF</a></li>
<li class="page_item page-item-32"><a href="http://richnewman.wordpress.com/top-level-exception-handling-code-listing-1/" title="Top-level Exception Handling – Code Listing&nbsp;2">Top-level Exception Handling – Code Listing&nbsp;2</a></li>
<li class="page_item page-item-33"><a href="http://richnewman.wordpress.com/top-level-exception-handling-code-listing-2/" title="Top-level Exception Handling – Code Listing&nbsp;3">Top-level Exception Handling – Code Listing&nbsp;3</a></li>
<li class="page_item page-item-34"><a href="http://richnewman.wordpress.com/top-level-exception-handling-code-listing-3/" title="Top-level Exception Handling – Code Listing&nbsp;4">Top-level Exception Handling – Code Listing&nbsp;4</a></li>
<li class="page_item page-item-94"><a href="http://richnewman.wordpress.com/using-custom-net-events-to-invoke-commands/" title="Using Custom .NET Events to Invoke&nbsp;Commands">Using Custom .NET Events to Invoke&nbsp;Commands</a></li>
<li class="page_item page-item-38"><a href="http://richnewman.wordpress.com/using-hsl-color-original-color-scheme/" title="Using HSL Color – Original Color&nbsp;Scheme">Using HSL Color – Original Color&nbsp;Scheme</a></li>
		</ul>
		</li>
<li id="calendar-2" class="widget widget_calendar"><h2 class="widgettitle">&nbsp;</h2>
<div id="calendar_wrap"><table id="wp-calendar" summary="Calendar">
	<caption>August 2007</caption>
	<thead>
	<tr>
		<th abbr="Monday" scope="col" title="Monday">M</th>
		<th abbr="Tuesday" scope="col" title="Tuesday">T</th>
		<th abbr="Wednesday" scope="col" title="Wednesday">W</th>
		<th abbr="Thursday" scope="col" title="Thursday">T</th>
		<th abbr="Friday" scope="col" title="Friday">F</th>
		<th abbr="Saturday" scope="col" title="Saturday">S</th>
		<th abbr="Sunday" scope="col" title="Sunday">S</th>
	</tr>
	</thead>

	<tfoot>
	<tr>
		<td abbr="July" colspan="3" id="prev"><a href="http://richnewman.wordpress.com/2007/07/" title="View posts for July 2007">« Jul</a></td>
		<td class="pad">&nbsp;</td>
		<td abbr="September" colspan="3" id="next"><a href="http://richnewman.wordpress.com/2007/09/" title="View posts for September 2007">Sep »</a></td>
	</tr>
	</tfoot>

	<tbody>
	<tr>
		<td colspan="2" class="pad">&nbsp;</td><td>1</td><td>2</td><td>3</td><td><a href="http://richnewman.wordpress.com/2007/08/04/" title="Some Thoughts on SOA and Application Design using the&nbsp;CAB/SCSF
An Aside on Inversion of Control, Dependency Inversion and Dependency Injection (Introduction to CAB/SCSF Part&nbsp;4)
Random Numbers&nbsp;Problem">4</a></td><td><a href="http://richnewman.wordpress.com/2007/08/05/" title="Dependency Injection and the Composite Application Block (Introduction to CAB/SCSF Part&nbsp;5)">5</a></td>
	</tr>
	<tr>
		<td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td>
	</tr>
	<tr>
		<td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>18</td><td>19</td>
	</tr>
	<tr>
		<td>20</td><td>21</td><td>22</td><td>23</td><td>24</td><td><a href="http://richnewman.wordpress.com/2007/08/25/" title="A Beginner’s Guide to calling a .NET Library from&nbsp;Access
Book Review: ‘Programming Microsoft Composite UI Application Block and Smart Client Software Factory’ by David S Platt (Microsoft&nbsp;Press)">25</a></td><td>26</td>
	</tr>
	<tr>
		<td>27</td><td>28</td><td>29</td><td>30</td><td>31</td>
		<td class="pad" colspan="2">&nbsp;</td>
	</tr>
	</tbody>
	</table></div></li>
<li id="meta-2" class="widget widget_meta"><h2 class="widgettitle">Meta</h2>
			<ul>
						<li><a href="http://richnewman.wordpress.com/wp-login.php">Log in</a></li>
			<li><a href="http://richnewman.wordpress.com/feed/" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://richnewman.wordpress.com/comments/feed/" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://wordpress.com/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.com</a></li>
						</ul>
</li>

</ul>

</div>


<p class="credit"><a href="http://wordpress.com/" rel="generator">Blog at WordPress.com</a>.</p>

</div>

<script type="text/javascript" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/quant.js"></script>
<script type="text/javascript">_qoptions = { labels:"adt.0,language.en" };_qacct="p-18-mFEk4J448M";quantserve();</script>
<noscript><p><img
src="http://pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif?labels=adt.0%2Clanguage.en"
style="display: none" height="1" width="1" alt="" /></p></noscript>
<script src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/w.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'909413','v':'wpcom','user_id':'0','post':'80','subd':'richnewman'});
ex_go({'crypt':'RDZ8LFkxbXFDdT8yZmU5JitKNVZhUVdPbUEyLltsWHFDTXd6NS98VS1ML0ZRJWROW2NLSz0wSUp1fGhTU2NySVldTi1YcVhSJUJkfDQ4JT92UFYlXWNIVVpUU0guLlYvdTJ5TStGczVbcEhSM08uQy9IclM/NVUxNkxkLGViWlo5JnBvc0kvL1dBZjlVRnpLNlppRzJvLEJ3Li0vZWRrJi9ETDdMc0pPYTUsVnxsUWFvYkNQMTNOQmt8anNQSWlmLTdEMG9FaWJdLDBKYkxpLD0zbG1wYXdPXSU0RX5QQnZPQV80aFpSLldG'});
re_go({'v':'sph','b':'909413','p':'80','d[richnewman.wordpress.com]':'3'});
addLoadEvent(function(){linktracker_init('909413',80);});
</script><img id="wpstats" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/g_002.gif" alt=""><img id="wpstats2" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/g_003.gif" alt="" style="display: none;"><img id="wpstats" src="Dependency%20Injection%20and%20the%20Composite%20Application%20Block%20%28Introduction%20to%20CAB_SCSF%20Part%205%29%20%C2%AB%20Rich%20Newman_files/g.gif" alt="" style="display: none;">
</body></html>