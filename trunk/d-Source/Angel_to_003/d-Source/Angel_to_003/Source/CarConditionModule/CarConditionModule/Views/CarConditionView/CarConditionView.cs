//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Angel_to_003.Infrastructure.Interface;
using Angel_to_003.Infrastructure.Interface.Constants;
using Angel_to_003.DataSourceModule.Interface.Schema;
using System.Collections.Generic;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Angel_to_003.CarConditionModule
{
    public partial class CarConditionView : UserControl, ICarConditionView
    {
        public CarConditionView()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
            
        }
        /// <summary>
        /// Меняем данные в легковых автомобилях по запросу
        /// </summary>
        /// <param name="src"></param>
        public void ChangeCarDataSet(List<uspVCAR_CONDITION_SelectCarResult> src)
        {
            try
            {
                carDataGridView.DataSource = src;
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, ExceptionPolicyNames.DataAccessExceptionPolicy);
                if (rethrow)
                {
                    throw;
                }
            }
        }
        /// <summary>
        /// Меняем данные в грузовых автомобилях по запросу
        /// </summary>
        /// <param name="src"></param>
        public void ChangeFreightDataSet(List<uspVCAR_CONDITION_SelectFreightResult> src)
        {
            try
            {
                freightDataGridView.DataSource = src;
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, ExceptionPolicyNames.DataAccessExceptionPolicy);
                if (rethrow)
                {
                    throw;
                }
            }
        }
    }
}

